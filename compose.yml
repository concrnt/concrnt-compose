services:
  gateway:
    image: ghcr.io/totegamma/ccgateway:v1.6.6
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"
    volumes:
      - ./etc:/etc/concrnt/:ro
    networks:
      - external
      - internal

  api:
    image: ghcr.io/totegamma/ccapi:v1.6.6
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./etc:/etc/concrnt/:ro
    expose:
      - 8000
    networks:
      - external
      - internal

  webui:
    image: ghcr.io/totegamma/ccwebui:v1.6.6
    restart: always
    expose:
      - 80
    networks:
      - external
      - internal

  hyperproxy:
    image: ghcr.io/concrnt/hyperproxy:v0.3.2
    restart: always
    expose:
      - 8080
    networks:
      - external
      - internal

# apbridge:
#   image: ghcr.io/concrnt/ccworld-ap-bridge:v0.4.1
#   restart: always
#   depends_on:
#     db:
#       condition: service_healthy
#     redis:
#       condition: service_healthy
#   volumes:
#     - ./etc:/etc/concrnt/:ro
#   expose:
#     - 8000
#   networks:
#     - external
#     - internal

# mediaserver:
#   image: ghcr.io/totegamma/cc-media-server:v0.3.3
#   restart: always
#   links:
#     - db
#   depends_on:
#     db:
#       condition: service_healthy
#   expose:
#     - 8000
#   environment:
#     bucketName:
#     endpointUrl:
#     accessKeyId:
#     accessKeySecret:
#     publicBaseUrl:
#     quota:
#     forcePathStyle:
#     db_dsn: "host=db user=postgres password=postgres dbname=concrnt"
#   networks:
#     - external
#     - internal

# search:
#   restart: always
#   image: ghcr.io/concrnt/cc-search:v0.1.1
#   links:
#     - db
#   depends_on:
#     db:
#       condition: service_healthy
#     redis:
#       condition: service_healthy
#     meilisearch:
#       condition: service_healthy
#   expose:
#     - 8000
#   environment:
#     DB_DSN: "host=db user=postgres password=postgres dbname=concrnt"
#     MEILISEARCH_URL: "http://meilisearch:7700"
#     MEILISEARCH_KEY: "concrnt-meilisearch"
#     MEILISEARCH_IDX: "concrnt"
#     REDIS_URL: "redis://redis:6379"
#   networks:
#     - internal

# meilisearch:
#   restart: always
#   image: getmeili/meilisearch:prototype-japanese-13
#   environment:
#     MEILI_NO_ANALYTICS: true
#     MEILI_ENV: production
#     MEILI_MASTER_KEY: "concrnt-meilisearch"
#   healthcheck:
#       test: set -o pipefail;curl -fsS http://localhost:7700/health | grep -q '{"status":"available"}'
#       retries: 3
#       timeout: 5s
#   volumes:
#     - ./_composeData/meili_data:/meili_data
#   networks:
#     - internal

  db:
    restart: always
    image: postgres:16-bookworm
    healthcheck:
      test: "pg_isready -U postgres"
      interval: 5s
      retries: 20
    volumes:
      - ./_composeData/db:/var/lib/postgresql/data
    environment:
      - "POSTGRES_PASSWORD=postgres"
      - "POSTGRES_DB=concrnt"
    expose:
      - 5432
    networks:
      - internal

  redis:
    restart: always
    image: redis:7-bookworm
    volumes:
      - ./_composeData/redis:/data
    healthcheck:
      test: "redis-cli ping"
      interval: 5s
      retries: 20
    expose:
      - 6379
    networks:
      - internal

  memcached:
    restart: always
    image: memcached:1.6-bookworm
    expose:
      - 11211
    networks:
      - internal
  
networks:
  external:
  internal:
    internal: true
